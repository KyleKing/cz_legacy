{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"cz_legacy \u2693\ufe0e Custom Commitizen parser for user-specified legacy change types. The parser utilizes the cz_conventional_commits pattern and extends with the tag mapping specified in the configuration file. While old change types will appear in the \u201cChangelog\u201d, the user will be prevented from using them in new commits. This is the reverse of the revert/chore logic from commitizen that allows use of those commit types, but won\u2019t display them in the changelog. Alternatives \u2693\ufe0e This customization only works when old commits use the <change_type>: <message> format that can be parsed by commitizen. If that doesn\u2019t fit your use case, you may want to try out incremental which (I think) prepends to an existing CHANGELOG Usage \u2693\ufe0e Pre-Commit \u2693\ufe0e To use in pre-commit, add this to your pre-commit-config.yml . Run pre-commit autoupdate to get the latest version repos : - repo : https://github.com/commitizen-tools/commitizen rev : main hooks : - id : commitizen additional_dependencies : [ cz_legacy ] stages : [ commit-msg ] Configuration \u2693\ufe0e At minimum, you must have the name = \"cz_legacy\" and [tool.commitizen.cz_legacy_map] in your configuration file. The below example is for TOML, you can also utilize a YAML or JSON file. Below is an example of the three change legacy types Chg, Fix, and New, but the user can choose any tag names and associated mapping for the Changelog [tool.commitizen] name = \"cz_legacy\" # Other tool.commitizen configuration options [tool.commitizen.cz_legacy_map] Chg = \"Change (old)\" Fix = \"Fix (old)\" New = \"New (old)\" Issues \u2693\ufe0e If you have any feature requests, run into any bugs, or have questions, feel free to start a discussion or open an issue on Github at https://github.com/kyleking/cz_legacy . Project Status \u2693\ufe0e See the Open Issues and/or the CODE_TAG_SUMMARY . For release history, see the CHANGELOG . Contributing \u2693\ufe0e We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation: DEVELOPER_GUIDE STYLE_GUIDE Code of Conduct \u2693\ufe0e We follow the Contributor Covenant Code of Conduct . Open Source Status \u2693\ufe0e We try to reasonably meet most aspects of the \u201cOpenSSF scorecard\u201d from Open Source Insights Responsible Disclosure \u2693\ufe0e If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com . License \u2693\ufe0e LICENSE","title":"cz_legacy"},{"location":"#cz_legacy","text":"Custom Commitizen parser for user-specified legacy change types. The parser utilizes the cz_conventional_commits pattern and extends with the tag mapping specified in the configuration file. While old change types will appear in the \u201cChangelog\u201d, the user will be prevented from using them in new commits. This is the reverse of the revert/chore logic from commitizen that allows use of those commit types, but won\u2019t display them in the changelog.","title":"cz_legacy"},{"location":"#alternatives","text":"This customization only works when old commits use the <change_type>: <message> format that can be parsed by commitizen. If that doesn\u2019t fit your use case, you may want to try out incremental which (I think) prepends to an existing CHANGELOG","title":"Alternatives"},{"location":"#usage","text":"","title":"Usage"},{"location":"#pre-commit","text":"To use in pre-commit, add this to your pre-commit-config.yml . Run pre-commit autoupdate to get the latest version repos : - repo : https://github.com/commitizen-tools/commitizen rev : main hooks : - id : commitizen additional_dependencies : [ cz_legacy ] stages : [ commit-msg ]","title":"Pre-Commit"},{"location":"#configuration","text":"At minimum, you must have the name = \"cz_legacy\" and [tool.commitizen.cz_legacy_map] in your configuration file. The below example is for TOML, you can also utilize a YAML or JSON file. Below is an example of the three change legacy types Chg, Fix, and New, but the user can choose any tag names and associated mapping for the Changelog [tool.commitizen] name = \"cz_legacy\" # Other tool.commitizen configuration options [tool.commitizen.cz_legacy_map] Chg = \"Change (old)\" Fix = \"Fix (old)\" New = \"New (old)\"","title":"Configuration"},{"location":"#issues","text":"If you have any feature requests, run into any bugs, or have questions, feel free to start a discussion or open an issue on Github at https://github.com/kyleking/cz_legacy .","title":"Issues"},{"location":"#project-status","text":"See the Open Issues and/or the CODE_TAG_SUMMARY . For release history, see the CHANGELOG .","title":"Project Status"},{"location":"#contributing","text":"We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation: DEVELOPER_GUIDE STYLE_GUIDE","title":"Contributing"},{"location":"#code-of-conduct","text":"We follow the Contributor Covenant Code of Conduct .","title":"Code of Conduct"},{"location":"#open-source-status","text":"We try to reasonably meet most aspects of the \u201cOpenSSF scorecard\u201d from Open Source Insights","title":"Open Source Status"},{"location":"#responsible-disclosure","text":"If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com .","title":"Responsible Disclosure"},{"location":"#license","text":"LICENSE","title":"License"},{"location":"docs/Advanced_Documentation/","text":"Developer documentation","title":"Docs"},{"location":"docs/CHANGELOG/","text":"Unreleased \u2693\ufe0e 0.1.7 (2022-09-17) \u2693\ufe0e Fix \u2693\ufe0e update the version files list #3 : ensure tests are only run when calcipy is available 0.1.6 (2022-02-18) \u2693\ufe0e Fix \u2693\ufe0e add link to changelog for PyPi regular imports do not work with this design 0.1.5 (2022-02-18) \u2693\ufe0e Fix \u2693\ufe0e update cz_legacy hook cleanup tests and import checks 0.1.3 (2022-01-16) \u2693\ufe0e Fix \u2693\ufe0e init calcipy template Refactor \u2693\ufe0e use \u201cimport as\u201d for discover_this rename isort for copier 0.1.2 (2021-05-22) \u2693\ufe0e Fix \u2693\ufe0e specify minimum commitizen ver 0.1.1 (2020-12-31) \u2693\ufe0e Refactor \u2693\ufe0e raise commitizen CustomError 0.1.0 (2020-12-24) \u2693\ufe0e Fix \u2693\ufe0e update links in documentation 0.1.0rc0 (2020-12-24) \u2693\ufe0e Feat \u2693\ufe0e add pre-commit functional LegacyCz and docs Fix \u2693\ufe0e use cz>=2.11.1 by bumping min python prevent legacy types on new commits","title":"CHANGELOG"},{"location":"docs/CHANGELOG/#unreleased","text":"","title":"Unreleased"},{"location":"docs/CHANGELOG/#017-2022-09-17","text":"","title":"0.1.7 (2022-09-17)"},{"location":"docs/CHANGELOG/#fix","text":"update the version files list #3 : ensure tests are only run when calcipy is available","title":"Fix"},{"location":"docs/CHANGELOG/#016-2022-02-18","text":"","title":"0.1.6 (2022-02-18)"},{"location":"docs/CHANGELOG/#fix_1","text":"add link to changelog for PyPi regular imports do not work with this design","title":"Fix"},{"location":"docs/CHANGELOG/#015-2022-02-18","text":"","title":"0.1.5 (2022-02-18)"},{"location":"docs/CHANGELOG/#fix_2","text":"update cz_legacy hook cleanup tests and import checks","title":"Fix"},{"location":"docs/CHANGELOG/#013-2022-01-16","text":"","title":"0.1.3 (2022-01-16)"},{"location":"docs/CHANGELOG/#fix_3","text":"init calcipy template","title":"Fix"},{"location":"docs/CHANGELOG/#refactor","text":"use \u201cimport as\u201d for discover_this rename isort for copier","title":"Refactor"},{"location":"docs/CHANGELOG/#012-2021-05-22","text":"","title":"0.1.2 (2021-05-22)"},{"location":"docs/CHANGELOG/#fix_4","text":"specify minimum commitizen ver","title":"Fix"},{"location":"docs/CHANGELOG/#011-2020-12-31","text":"","title":"0.1.1 (2020-12-31)"},{"location":"docs/CHANGELOG/#refactor_1","text":"raise commitizen CustomError","title":"Refactor"},{"location":"docs/CHANGELOG/#010-2020-12-24","text":"","title":"0.1.0 (2020-12-24)"},{"location":"docs/CHANGELOG/#fix_5","text":"update links in documentation","title":"Fix"},{"location":"docs/CHANGELOG/#010rc0-2020-12-24","text":"","title":"0.1.0rc0 (2020-12-24)"},{"location":"docs/CHANGELOG/#feat","text":"add pre-commit functional LegacyCz and docs","title":"Feat"},{"location":"docs/CHANGELOG/#fix_6","text":"use cz>=2.11.1 by bumping min python prevent legacy types on new commits","title":"Fix"},{"location":"docs/CODE_TAG_SUMMARY/","text":"Task Summary \u2693\ufe0e Auto-Generated by calcipy Type Comment Last Edit Source File FIXME Needs to support mkdocs: https://github.com/executablebooks/mdformat/issues/317 2022-09-17 .pre-commit-config.yaml:49 FIXME Replace with programmatic imports? Maybe explicit imports to check backward compatibility of public API? 2021-12-09 scripts/check_imports.py:7 PLANNED DDICT_TYPE 2021-07-05 tests/conftest.py:15 Found code tags for FIXME (2), PLANNED (1)","title":"Task Summary"},{"location":"docs/CODE_TAG_SUMMARY/#task-summary","text":"Auto-Generated by calcipy Type Comment Last Edit Source File FIXME Needs to support mkdocs: https://github.com/executablebooks/mdformat/issues/317 2022-09-17 .pre-commit-config.yaml:49 FIXME Replace with programmatic imports? Maybe explicit imports to check backward compatibility of public API? 2021-12-09 scripts/check_imports.py:7 PLANNED DDICT_TYPE 2021-07-05 tests/conftest.py:15 Found code tags for FIXME (2), PLANNED (1)","title":"Task Summary"},{"location":"docs/DEVELOPER_GUIDE/","text":"Developer Notes \u2693\ufe0e Local Development \u2693\ufe0e git clone https://github.com/kyleking/cz_legacy.git cd cz_legacy poetry install # See the available tasks poetry run doit list # Run the default task list (lint, auto-format, test coverage, etc.) poetry run doit --continue # Make code changes and run specific tasks as needed: poetry run doit run test Publishing \u2693\ufe0e For testing, create an account on TestPyPi . Replace ... with the API token generated on TestPyPi or PyPi respectively poetry config repositories.testpypi https://test.pypi.org/legacy/ poetry config pypi-token.testpypi ... poetry run doit run publish_test_pypi # If you didn't configure a token, you will need to provide your username and password to publish To publish to the real PyPi poetry config pypi-token.pypi ... poetry run doit run publish # For a full release, triple check the default tasks, increment the version, rebuild documentation (twice), and publish! poetry run doit run --continue poetry run doit run cl_bump lock document deploy_docs publish # For pre-releases use cl_bump_pre poetry run doit run cl_bump_pre -p rc poetry run doit run lock document deploy_docs publish Current Status \u2693\ufe0e File Statements Missing Excluded Coverage cz_legacy/__init__.py 5 0 0 100.0% cz_legacy/cz_legacy.py 17 0 0 100.0% Totals 22 0 0 100.0% Generated on: 2022-12-03","title":"Developer Notes"},{"location":"docs/DEVELOPER_GUIDE/#developer-notes","text":"","title":"Developer Notes"},{"location":"docs/DEVELOPER_GUIDE/#local-development","text":"git clone https://github.com/kyleking/cz_legacy.git cd cz_legacy poetry install # See the available tasks poetry run doit list # Run the default task list (lint, auto-format, test coverage, etc.) poetry run doit --continue # Make code changes and run specific tasks as needed: poetry run doit run test","title":"Local Development"},{"location":"docs/DEVELOPER_GUIDE/#publishing","text":"For testing, create an account on TestPyPi . Replace ... with the API token generated on TestPyPi or PyPi respectively poetry config repositories.testpypi https://test.pypi.org/legacy/ poetry config pypi-token.testpypi ... poetry run doit run publish_test_pypi # If you didn't configure a token, you will need to provide your username and password to publish To publish to the real PyPi poetry config pypi-token.pypi ... poetry run doit run publish # For a full release, triple check the default tasks, increment the version, rebuild documentation (twice), and publish! poetry run doit run --continue poetry run doit run cl_bump lock document deploy_docs publish # For pre-releases use cl_bump_pre poetry run doit run cl_bump_pre -p rc poetry run doit run lock document deploy_docs publish","title":"Publishing"},{"location":"docs/DEVELOPER_GUIDE/#current-status","text":"File Statements Missing Excluded Coverage cz_legacy/__init__.py 5 0 0 100.0% cz_legacy/cz_legacy.py 17 0 0 100.0% Totals 22 0 0 100.0% Generated on: 2022-12-03","title":"Current Status"},{"location":"docs/STYLE_GUIDE/","text":"Personal Style Guides \u2693\ufe0e Git \u2693\ufe0e We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver . For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below. Commitizen Types and Scopes \u2693\ufe0e type(scope): description Types fix : A bug fix feat : A new feature docs : Documentation-only changes (code comments, separate docs) style : Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons) perf : A code change that improves performance refactor : A change to production code that is not a fix , feat , or perf test : Adding missing or correcting existing tests build : Changes that affect the build system or external dependencies ci : Changes to our CI configuration files and scripts A ! can be used to indicate a breaking change ( refactor!: drop support for Node 6 ) SemVer Rules Based on commit type, the version will be auto-incremented: fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR Scopes A Class, File name, Issue Number, other appropriate noun. As examples: build(poetry): bump requests to v3 or style(#32): add missing type annotations Tips What if a commit fits multiple types? Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes Use git rebase -i to fix commit names prior to merging if incorrect types/scopes are used Git Description Guidelines \u2693\ufe0e Commit message guidelines Full sentence with verb ( lowercase ) and concise description. Below are modified examples for Conventional Commits fix(roles): bug in admin role permissions feat(ui): implement new button design build(pip): upgrade package to remove vulnerabilities refactor: file structure to improve code readability perf(cli): rewrite methods feat(api): endpoints to implement new customer dashboard How to write a good commit message A diff will tell you what changed, but only the commit message can properly tell you why. Keep in mind: This has all been said before . From the seven rules of a great Git commit message: Try for 50 characters, but consider 72 the hard limit Use the body to explain what and why vs. how Issue Labels and Milestones \u2693\ufe0e Personal Guide For Issue Labels, see labels.yml Milestones Current Tasks : main milestone ( name could change based on a specific project, sprint, or month ) Next Tasks Blue Sky Research [Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each \u201cit is much more helpful to see the status and type of all issues at a glance.\u201d One of each: Status: \u2026 Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed Type: \u2026 Bug, Maintenance, Question, Enhancement Priority: \u2026 Critical, High, Medium, Low [Britecharts](https://britecharts.github.io/britecharts/github-labels.html) Status: \u2026 On Review \u2013 Request that we are pondering if including or not Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed Needs Design \u2013 Feature that needs a design Ready to Go \u2013 Issue that has been defined and is ready to get started with In Progress \u2013 Issue that is being worked on right now. Completed \u2013 Finished feature or fix Type: \u2026 Bug \u2013 An unexpected problem or unintended behavior Feature \u2013 A new feature request Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements Documentation \u2013 A documentation improvement task Question \u2013 An issue or PR that needs more information or a user question Not Included Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming [Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html) Milestone Overview What are we doing right now? What aren\u2019t we doing right now? 2a. Stuff we\u2019ll probably do soon 2b. Stuff we probably won\u2019t do soon What aren\u2019t we sure about? Milestone Descriptions Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration. Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone. We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone. Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored. What aren\u2019t we sure about?: issues with no milestone. Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets \u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d External Links \u2693\ufe0e TODO: Revisit Git: The Simple Guide Commit Messages and why use the present tense Github\u2019s Advice on Github Most Comprehensive Guide Git Pro Book (free) Bash Tab-Completion Snippet Python \u2693\ufe0e TODO: Revisit Python Style Guides https://gist.github.com/sloria/7001839 http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/ https://innoq.github.io/cards42org_en/ https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide https://www.python.org/doc/humor/ https://docs.python-guide.org/writing/reading/ https://realpython.com/python-refactoring/ ADRs \u2693\ufe0e TODO: Revisit Examples https://github.com/pawamoy/mkdocstrings/issues/28 <\u2013 Links \u2013>","title":"Personal Style Guides"},{"location":"docs/STYLE_GUIDE/#personal-style-guides","text":"","title":"Personal Style Guides"},{"location":"docs/STYLE_GUIDE/#git","text":"We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver . For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below.","title":"Git"},{"location":"docs/STYLE_GUIDE/#commitizen-types-and-scopes","text":"type(scope): description Types fix : A bug fix feat : A new feature docs : Documentation-only changes (code comments, separate docs) style : Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons) perf : A code change that improves performance refactor : A change to production code that is not a fix , feat , or perf test : Adding missing or correcting existing tests build : Changes that affect the build system or external dependencies ci : Changes to our CI configuration files and scripts A ! can be used to indicate a breaking change ( refactor!: drop support for Node 6 ) SemVer Rules Based on commit type, the version will be auto-incremented: fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR Scopes A Class, File name, Issue Number, other appropriate noun. As examples: build(poetry): bump requests to v3 or style(#32): add missing type annotations Tips What if a commit fits multiple types? Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes Use git rebase -i to fix commit names prior to merging if incorrect types/scopes are used","title":"Commitizen Types and Scopes"},{"location":"docs/STYLE_GUIDE/#git-description-guidelines","text":"Commit message guidelines Full sentence with verb ( lowercase ) and concise description. Below are modified examples for Conventional Commits fix(roles): bug in admin role permissions feat(ui): implement new button design build(pip): upgrade package to remove vulnerabilities refactor: file structure to improve code readability perf(cli): rewrite methods feat(api): endpoints to implement new customer dashboard How to write a good commit message A diff will tell you what changed, but only the commit message can properly tell you why. Keep in mind: This has all been said before . From the seven rules of a great Git commit message: Try for 50 characters, but consider 72 the hard limit Use the body to explain what and why vs. how","title":"Git Description Guidelines"},{"location":"docs/STYLE_GUIDE/#issue-labels-and-milestones","text":"Personal Guide For Issue Labels, see labels.yml Milestones Current Tasks : main milestone ( name could change based on a specific project, sprint, or month ) Next Tasks Blue Sky Research [Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each \u201cit is much more helpful to see the status and type of all issues at a glance.\u201d One of each: Status: \u2026 Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed Type: \u2026 Bug, Maintenance, Question, Enhancement Priority: \u2026 Critical, High, Medium, Low [Britecharts](https://britecharts.github.io/britecharts/github-labels.html) Status: \u2026 On Review \u2013 Request that we are pondering if including or not Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed Needs Design \u2013 Feature that needs a design Ready to Go \u2013 Issue that has been defined and is ready to get started with In Progress \u2013 Issue that is being worked on right now. Completed \u2013 Finished feature or fix Type: \u2026 Bug \u2013 An unexpected problem or unintended behavior Feature \u2013 A new feature request Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements Documentation \u2013 A documentation improvement task Question \u2013 An issue or PR that needs more information or a user question Not Included Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming [Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html) Milestone Overview What are we doing right now? What aren\u2019t we doing right now? 2a. Stuff we\u2019ll probably do soon 2b. Stuff we probably won\u2019t do soon What aren\u2019t we sure about? Milestone Descriptions Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration. Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone. We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone. Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored. What aren\u2019t we sure about?: issues with no milestone. Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets \u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d","title":"Issue Labels and Milestones"},{"location":"docs/STYLE_GUIDE/#external-links","text":"TODO: Revisit Git: The Simple Guide Commit Messages and why use the present tense Github\u2019s Advice on Github Most Comprehensive Guide Git Pro Book (free) Bash Tab-Completion Snippet","title":"External Links"},{"location":"docs/STYLE_GUIDE/#python","text":"TODO: Revisit Python Style Guides https://gist.github.com/sloria/7001839 http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/ https://innoq.github.io/cards42org_en/ https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide https://www.python.org/doc/humor/ https://docs.python-guide.org/writing/reading/ https://realpython.com/python-refactoring/","title":"Python"},{"location":"docs/STYLE_GUIDE/#adrs","text":"TODO: Revisit Examples https://github.com/pawamoy/mkdocstrings/issues/28 <\u2013 Links \u2013>","title":"ADRs"},{"location":"modules/cz_legacy/","text":"cz_legacy \u2693\ufe0e cz_legacy. View Source \"\"\"cz_legacy.\"\"\" from .cz_legacy import _LegacyCz as discover_this # noqa: N813 __version__ = '0.1.7' __pkg_name__ = 'cz_legacy' __all__ = ( 'discover_this' ,) \"\"\"Make the _LegacyCz class discoverable by commitizen.\"\"\" Sub-modules \u2693\ufe0e cz_legacy.cz_legacy Classes \u2693\ufe0e discover_this \u2693\ufe0e class discover_this ( config : commitizen . config . base_config . BaseConfig ) View Source class _LegacyCz ( ConventionalCommitsCz ): def __init__ ( self , config : BaseConfig ) -> None : \"\"\"Initialize the class and override the data members. Args: config: commitizen BaseConfig that stores the parsed settings. Passed to base class Raises: CustomError: commitizen-specific error and exit code to indicate that a configuration item is missing \"\"\" super () . __init__ ( config ) # Read the user-specified legacy change types (ct) cz_legacy_map = self . config . settings . get ( 'cz_legacy_map' ) if not cz_legacy_map : raise CustomError ( f 'User must specify a `cz_legacy_map` dict in `[tool.commitizen]`. Example: \\n { EXAMPLE } ' ) joined_types = '|' . join ([ * cz_legacy_map . keys ()]) self . commit_parser = defaults . commit_parser . replace ( '<change_type>' , f '<change_type> { joined_types } |' ) self . change_type_map = { ** self . change_type_map , ** cz_legacy_map } extended_pattern = defaults . bump_pattern . replace ( 'refactor' , f 'refactor| { joined_types } ' ) self . bump_pattern = extended_pattern self . changelog_pattern = extended_pattern Ancestors (in MRO) \u2693\ufe0e commitizen.cz.conventional_commits.conventional_commits.ConventionalCommitsCz commitizen.cz.base.BaseCommitizen Class variables \u2693\ufe0e bump_map bump_pattern change_type_map change_type_order changelog_hook changelog_message_builder_hook changelog_pattern commit_parser default_style_config version_parser Instance variables \u2693\ufe0e style Methods \u2693\ufe0e example \u2693\ufe0e def example ( self ) -> str Example of the commit message. View Source def example ( self ) -> str : return ( \"fix: correct minor typos in code \\n \" \" \\n \" \"see the issue for details on the typos fixed \\n \" \" \\n \" \"closes issue #12\" ) info \u2693\ufe0e def info ( self ) -> str Information about the standardized commit message. View Source def info ( self ) -> str : dir_path = os . path . dirname ( os . path . realpath ( __file__ )) filepath = os . path . join ( dir_path , \"conventional_commits_info.txt\" ) with open ( filepath , \"r\" ) as f : content = f . read () return content message \u2693\ufe0e def message ( self , answers : dict ) -> str Format your git message. View Source def message ( self , answers : dict ) -> str : prefix = answers [ \"prefix\" ] scope = answers [ \"scope\" ] subject = answers [ \"subject\" ] body = answers [ \"body\" ] footer = answers [ \"footer\" ] is_breaking_change = answers [ \"is_breaking_change\" ] if scope : scope = f \"( { scope } )\" if body : body = f \" \\n\\n { body } \" if is_breaking_change : footer = f \"BREAKING CHANGE: { footer } \" if footer : footer = f \" \\n\\n { footer } \" message = f \" { prefix }{ scope } : { subject }{ body }{ footer } \" return message process_commit \u2693\ufe0e def process_commit ( self , commit : str ) -> str Process commit for changelog. If not overwritten, it returns the first line of commit. View Source def process_commit ( self , commit : str ) -> str : pat = re . compile ( self . schema_pattern ()) m = re . match ( pat , commit ) if m is None : return \"\" return m . group ( 3 ) . strip () questions \u2693\ufe0e def questions ( self ) -> Iterable [ MutableMapping [ str , Any ]] Questions regarding the commit message. View Source def questions ( self ) -> Questions : questions : Questions = [ { \"type\" : \"list\" , \"name\" : \"prefix\" , \"message\" : \"Select the type of change you are committing\" , \"choices\" : [ { \"value\" : \"fix\" , \"name\" : \"fix: A bug fix. Correlates with PATCH in SemVer\" , \"key\" : \"x\" , }, { \"value\" : \"feat\" , \"name\" : \"feat: A new feature. Correlates with MINOR in SemVer\" , \"key\" : \"f\" , }, { \"value\" : \"docs\" , \"name\" : \"docs: Documentation only changes\" , \"key\" : \"d\" , }, { \"value\" : \"style\" , \"name\" : ( \"style: Changes that do not affect the \" \"meaning of the code (white-space, formatting,\" \" missing semi-colons, etc)\" ), \"key\" : \"s\" , }, { \"value\" : \"refactor\" , \"name\" : ( \"refactor: A code change that neither fixes \" \"a bug nor adds a feature\" ), \"key\" : \"r\" , }, { \"value\" : \"perf\" , \"name\" : \"perf: A code change that improves performance\" , \"key\" : \"p\" , }, { \"value\" : \"test\" , \"name\" : ( \"test: Adding missing or correcting \" \"existing tests\" ), \"key\" : \"t\" , }, { \"value\" : \"build\" , \"name\" : ( \"build: Changes that affect the build system or \" \"external dependencies (example scopes: pip, docker, npm)\" ), \"key\" : \"b\" , }, { \"value\" : \"ci\" , \"name\" : ( \"ci: Changes to our CI configuration files and \" \"scripts (example scopes: GitLabCI)\" ), \"key\" : \"c\" , }, ], }, { \"type\" : \"input\" , \"name\" : \"scope\" , \"message\" : ( \"What is the scope of this change? (class or file name): (press [enter] to skip) \\n \" ), \"filter\" : parse_scope , }, { \"type\" : \"input\" , \"name\" : \"subject\" , \"filter\" : parse_subject , \"message\" : ( \"Write a short and imperative summary of the code changes: (lower case and no period) \\n \" ), }, { \"type\" : \"input\" , \"name\" : \"body\" , \"message\" : ( \"Provide additional contextual information about the code changes: (press [enter] to skip) \\n \" ), \"filter\" : multiple_line_breaker , }, { \"type\" : \"confirm\" , \"message\" : \"Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer\" , \"name\" : \"is_breaking_change\" , \"default\" : False , }, { \"type\" : \"input\" , \"name\" : \"footer\" , \"message\" : ( \"Footer. Information about Breaking Changes and \" \"reference issues that this commit closes: (press [enter] to skip) \\n \" ), }, ] return questions schema \u2693\ufe0e def schema ( self ) -> str Schema definition of the commit message. View Source def schema ( self ) -> str : return ( \"<type>(<scope>): <subject> \\n \" \"<BLANK LINE> \\n \" \"<body> \\n \" \"<BLANK LINE> \\n \" \"(BREAKING CHANGE: )<footer>\" ) schema_pattern \u2693\ufe0e def schema_pattern ( self ) -> str Regex matching the schema used for message validation. View Source def schema_pattern ( self ) -> str : PATTERN = ( r \"(?s)\" # To explictly make . match new line r \"(build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump)\" # type r \"(\\(\\S+\\))?!?:\" # scope r \"( [^\\n\\r]+)\" # subject r \"((\\n\\n.*)|(\\s*))?$\" ) return PATTERN","title":"Cz legacy"},{"location":"modules/cz_legacy/#cz_legacy","text":"cz_legacy. View Source \"\"\"cz_legacy.\"\"\" from .cz_legacy import _LegacyCz as discover_this # noqa: N813 __version__ = '0.1.7' __pkg_name__ = 'cz_legacy' __all__ = ( 'discover_this' ,) \"\"\"Make the _LegacyCz class discoverable by commitizen.\"\"\"","title":"cz_legacy"},{"location":"modules/cz_legacy/#sub-modules","text":"cz_legacy.cz_legacy","title":"Sub-modules"},{"location":"modules/cz_legacy/#classes","text":"","title":"Classes"},{"location":"modules/cz_legacy/#discover_this","text":"class discover_this ( config : commitizen . config . base_config . BaseConfig ) View Source class _LegacyCz ( ConventionalCommitsCz ): def __init__ ( self , config : BaseConfig ) -> None : \"\"\"Initialize the class and override the data members. Args: config: commitizen BaseConfig that stores the parsed settings. Passed to base class Raises: CustomError: commitizen-specific error and exit code to indicate that a configuration item is missing \"\"\" super () . __init__ ( config ) # Read the user-specified legacy change types (ct) cz_legacy_map = self . config . settings . get ( 'cz_legacy_map' ) if not cz_legacy_map : raise CustomError ( f 'User must specify a `cz_legacy_map` dict in `[tool.commitizen]`. Example: \\n { EXAMPLE } ' ) joined_types = '|' . join ([ * cz_legacy_map . keys ()]) self . commit_parser = defaults . commit_parser . replace ( '<change_type>' , f '<change_type> { joined_types } |' ) self . change_type_map = { ** self . change_type_map , ** cz_legacy_map } extended_pattern = defaults . bump_pattern . replace ( 'refactor' , f 'refactor| { joined_types } ' ) self . bump_pattern = extended_pattern self . changelog_pattern = extended_pattern","title":"discover_this"},{"location":"modules/cz_legacy/#ancestors-in-mro","text":"commitizen.cz.conventional_commits.conventional_commits.ConventionalCommitsCz commitizen.cz.base.BaseCommitizen","title":"Ancestors (in MRO)"},{"location":"modules/cz_legacy/#class-variables","text":"bump_map bump_pattern change_type_map change_type_order changelog_hook changelog_message_builder_hook changelog_pattern commit_parser default_style_config version_parser","title":"Class variables"},{"location":"modules/cz_legacy/#instance-variables","text":"style","title":"Instance variables"},{"location":"modules/cz_legacy/#methods","text":"","title":"Methods"},{"location":"modules/cz_legacy/#example","text":"def example ( self ) -> str Example of the commit message. View Source def example ( self ) -> str : return ( \"fix: correct minor typos in code \\n \" \" \\n \" \"see the issue for details on the typos fixed \\n \" \" \\n \" \"closes issue #12\" )","title":"example"},{"location":"modules/cz_legacy/#info","text":"def info ( self ) -> str Information about the standardized commit message. View Source def info ( self ) -> str : dir_path = os . path . dirname ( os . path . realpath ( __file__ )) filepath = os . path . join ( dir_path , \"conventional_commits_info.txt\" ) with open ( filepath , \"r\" ) as f : content = f . read () return content","title":"info"},{"location":"modules/cz_legacy/#message","text":"def message ( self , answers : dict ) -> str Format your git message. View Source def message ( self , answers : dict ) -> str : prefix = answers [ \"prefix\" ] scope = answers [ \"scope\" ] subject = answers [ \"subject\" ] body = answers [ \"body\" ] footer = answers [ \"footer\" ] is_breaking_change = answers [ \"is_breaking_change\" ] if scope : scope = f \"( { scope } )\" if body : body = f \" \\n\\n { body } \" if is_breaking_change : footer = f \"BREAKING CHANGE: { footer } \" if footer : footer = f \" \\n\\n { footer } \" message = f \" { prefix }{ scope } : { subject }{ body }{ footer } \" return message","title":"message"},{"location":"modules/cz_legacy/#process_commit","text":"def process_commit ( self , commit : str ) -> str Process commit for changelog. If not overwritten, it returns the first line of commit. View Source def process_commit ( self , commit : str ) -> str : pat = re . compile ( self . schema_pattern ()) m = re . match ( pat , commit ) if m is None : return \"\" return m . group ( 3 ) . strip ()","title":"process_commit"},{"location":"modules/cz_legacy/#questions","text":"def questions ( self ) -> Iterable [ MutableMapping [ str , Any ]] Questions regarding the commit message. View Source def questions ( self ) -> Questions : questions : Questions = [ { \"type\" : \"list\" , \"name\" : \"prefix\" , \"message\" : \"Select the type of change you are committing\" , \"choices\" : [ { \"value\" : \"fix\" , \"name\" : \"fix: A bug fix. Correlates with PATCH in SemVer\" , \"key\" : \"x\" , }, { \"value\" : \"feat\" , \"name\" : \"feat: A new feature. Correlates with MINOR in SemVer\" , \"key\" : \"f\" , }, { \"value\" : \"docs\" , \"name\" : \"docs: Documentation only changes\" , \"key\" : \"d\" , }, { \"value\" : \"style\" , \"name\" : ( \"style: Changes that do not affect the \" \"meaning of the code (white-space, formatting,\" \" missing semi-colons, etc)\" ), \"key\" : \"s\" , }, { \"value\" : \"refactor\" , \"name\" : ( \"refactor: A code change that neither fixes \" \"a bug nor adds a feature\" ), \"key\" : \"r\" , }, { \"value\" : \"perf\" , \"name\" : \"perf: A code change that improves performance\" , \"key\" : \"p\" , }, { \"value\" : \"test\" , \"name\" : ( \"test: Adding missing or correcting \" \"existing tests\" ), \"key\" : \"t\" , }, { \"value\" : \"build\" , \"name\" : ( \"build: Changes that affect the build system or \" \"external dependencies (example scopes: pip, docker, npm)\" ), \"key\" : \"b\" , }, { \"value\" : \"ci\" , \"name\" : ( \"ci: Changes to our CI configuration files and \" \"scripts (example scopes: GitLabCI)\" ), \"key\" : \"c\" , }, ], }, { \"type\" : \"input\" , \"name\" : \"scope\" , \"message\" : ( \"What is the scope of this change? (class or file name): (press [enter] to skip) \\n \" ), \"filter\" : parse_scope , }, { \"type\" : \"input\" , \"name\" : \"subject\" , \"filter\" : parse_subject , \"message\" : ( \"Write a short and imperative summary of the code changes: (lower case and no period) \\n \" ), }, { \"type\" : \"input\" , \"name\" : \"body\" , \"message\" : ( \"Provide additional contextual information about the code changes: (press [enter] to skip) \\n \" ), \"filter\" : multiple_line_breaker , }, { \"type\" : \"confirm\" , \"message\" : \"Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer\" , \"name\" : \"is_breaking_change\" , \"default\" : False , }, { \"type\" : \"input\" , \"name\" : \"footer\" , \"message\" : ( \"Footer. Information about Breaking Changes and \" \"reference issues that this commit closes: (press [enter] to skip) \\n \" ), }, ] return questions","title":"questions"},{"location":"modules/cz_legacy/#schema","text":"def schema ( self ) -> str Schema definition of the commit message. View Source def schema ( self ) -> str : return ( \"<type>(<scope>): <subject> \\n \" \"<BLANK LINE> \\n \" \"<body> \\n \" \"<BLANK LINE> \\n \" \"(BREAKING CHANGE: )<footer>\" )","title":"schema"},{"location":"modules/cz_legacy/#schema_pattern","text":"def schema_pattern ( self ) -> str Regex matching the schema used for message validation. View Source def schema_pattern ( self ) -> str : PATTERN = ( r \"(?s)\" # To explictly make . match new line r \"(build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump)\" # type r \"(\\(\\S+\\))?!?:\" # scope r \"( [^\\n\\r]+)\" # subject r \"((\\n\\n.*)|(\\s*))?$\" ) return PATTERN","title":"schema_pattern"},{"location":"modules/cz_legacy/_code_diagrams/","text":"Code Diagrams \u2693\ufe0e Auto-generated with pylint-pyreverse Packages \u2693\ufe0e Full Size Classes \u2693\ufe0e Full Size","title":"Code Diagrams"},{"location":"modules/cz_legacy/_code_diagrams/#code-diagrams","text":"Auto-generated with pylint-pyreverse","title":"Code Diagrams"},{"location":"modules/cz_legacy/_code_diagrams/#packages","text":"Full Size","title":"Packages"},{"location":"modules/cz_legacy/_code_diagrams/#classes","text":"Full Size","title":"Classes"},{"location":"modules/cz_legacy/cz_legacy/","text":"cz_legacy.cz_legacy \u2693\ufe0e Support legacy commit tags specified in toml file. View Source \"\"\"Support legacy commit tags specified in toml file.\"\"\" from commitizen import defaults from commitizen.config.base_config import BaseConfig from commitizen.cz.conventional_commits.conventional_commits import ConventionalCommitsCz from commitizen.exceptions import CustomError EXAMPLE = \"\"\"[tool.commitizen] name = \"cz_legacy\" # Other tool.commitizen configuration options [tool.commitizen.cz_legacy_map] Chg = \"Change (old)\" Fix = \"Fix (old)\" New = \"New (old)\" \"\"\" \"\"\"Example custom TOML file configuration. Note: should be kept consistent with the README.\"\"\" class _LegacyCz ( ConventionalCommitsCz ): def __init__ ( self , config : BaseConfig ) -> None : \"\"\"Initialize the class and override the data members. Args: config: commitizen BaseConfig that stores the parsed settings. Passed to base class Raises: CustomError: commitizen-specific error and exit code to indicate that a configuration item is missing \"\"\" super () . __init__ ( config ) # Read the user-specified legacy change types (ct) cz_legacy_map = self . config . settings . get ( 'cz_legacy_map' ) if not cz_legacy_map : raise CustomError ( f 'User must specify a `cz_legacy_map` dict in `[tool.commitizen]`. Example: \\n { EXAMPLE } ' ) joined_types = '|' . join ([ * cz_legacy_map . keys ()]) self . commit_parser = defaults . commit_parser . replace ( '<change_type>' , f '<change_type> { joined_types } |' ) self . change_type_map = { ** self . change_type_map , ** cz_legacy_map } extended_pattern = defaults . bump_pattern . replace ( 'refactor' , f 'refactor| { joined_types } ' ) self . bump_pattern = extended_pattern self . changelog_pattern = extended_pattern Variables \u2693\ufe0e EXAMPLE Example custom TOML file configuration. Note: should be kept consistent with the README.","title":"cz_legacy.cz_legacy"},{"location":"modules/cz_legacy/cz_legacy/#cz_legacycz_legacy","text":"Support legacy commit tags specified in toml file. View Source \"\"\"Support legacy commit tags specified in toml file.\"\"\" from commitizen import defaults from commitizen.config.base_config import BaseConfig from commitizen.cz.conventional_commits.conventional_commits import ConventionalCommitsCz from commitizen.exceptions import CustomError EXAMPLE = \"\"\"[tool.commitizen] name = \"cz_legacy\" # Other tool.commitizen configuration options [tool.commitizen.cz_legacy_map] Chg = \"Change (old)\" Fix = \"Fix (old)\" New = \"New (old)\" \"\"\" \"\"\"Example custom TOML file configuration. Note: should be kept consistent with the README.\"\"\" class _LegacyCz ( ConventionalCommitsCz ): def __init__ ( self , config : BaseConfig ) -> None : \"\"\"Initialize the class and override the data members. Args: config: commitizen BaseConfig that stores the parsed settings. Passed to base class Raises: CustomError: commitizen-specific error and exit code to indicate that a configuration item is missing \"\"\" super () . __init__ ( config ) # Read the user-specified legacy change types (ct) cz_legacy_map = self . config . settings . get ( 'cz_legacy_map' ) if not cz_legacy_map : raise CustomError ( f 'User must specify a `cz_legacy_map` dict in `[tool.commitizen]`. Example: \\n { EXAMPLE } ' ) joined_types = '|' . join ([ * cz_legacy_map . keys ()]) self . commit_parser = defaults . commit_parser . replace ( '<change_type>' , f '<change_type> { joined_types } |' ) self . change_type_map = { ** self . change_type_map , ** cz_legacy_map } extended_pattern = defaults . bump_pattern . replace ( 'refactor' , f 'refactor| { joined_types } ' ) self . bump_pattern = extended_pattern self . changelog_pattern = extended_pattern","title":"cz_legacy.cz_legacy"},{"location":"modules/cz_legacy/cz_legacy/#variables","text":"EXAMPLE Example custom TOML file configuration. Note: should be kept consistent with the README.","title":"Variables"},{"location":"reference/SUMMARY/","text":"cz_legacy * cz_legacy","title":"SUMMARY"},{"location":"reference/cz_legacy/","text":"cz_legacy. Attributes \u2693\ufe0e __all__ module-attribute \u2693\ufe0e __all__ = ( 'discover_this' ) Make the _LegacyCz class discoverable by commitizen. Classes \u2693\ufe0e discover_this \u2693\ufe0e Bases: ConventionalCommitsCz Source code in cz_legacy/cz_legacy.py class _LegacyCz ( ConventionalCommitsCz ): def __init__ ( self , config : BaseConfig ) -> None : \"\"\"Initialize the class and override the data members. Args: config: commitizen BaseConfig that stores the parsed settings. Passed to base class Raises: CustomError: commitizen-specific error and exit code to indicate that a configuration item is missing \"\"\" super () . __init__ ( config ) # Read the user-specified legacy change types (ct) cz_legacy_map = self . config . settings . get ( 'cz_legacy_map' ) if not cz_legacy_map : raise CustomError ( f 'User must specify a `cz_legacy_map` dict in `[tool.commitizen]`. Example: \\n { EXAMPLE } ' ) joined_types = '|' . join ([ * cz_legacy_map . keys ()]) self . commit_parser = defaults . commit_parser . replace ( '<change_type>' , f '<change_type> { joined_types } |' ) self . change_type_map = { ** self . change_type_map , ** cz_legacy_map } extended_pattern = defaults . bump_pattern . replace ( 'refactor' , f 'refactor| { joined_types } ' ) self . bump_pattern = extended_pattern self . changelog_pattern = extended_pattern Functions \u2693\ufe0e __init__ \u2693\ufe0e __init__ ( config ) Initialize the class and override the data members. PARAMETER DESCRIPTION config commitizen BaseConfig that stores the parsed settings. Passed to base class TYPE: BaseConfig RAISES DESCRIPTION CustomError commitizen-specific error and exit code to indicate that a configuration item is missing Source code in cz_legacy/cz_legacy.py def __init__ ( self , config : BaseConfig ) -> None : \"\"\"Initialize the class and override the data members. Args: config: commitizen BaseConfig that stores the parsed settings. Passed to base class Raises: CustomError: commitizen-specific error and exit code to indicate that a configuration item is missing \"\"\" super () . __init__ ( config ) # Read the user-specified legacy change types (ct) cz_legacy_map = self . config . settings . get ( 'cz_legacy_map' ) if not cz_legacy_map : raise CustomError ( f 'User must specify a `cz_legacy_map` dict in `[tool.commitizen]`. Example: \\n { EXAMPLE } ' ) joined_types = '|' . join ([ * cz_legacy_map . keys ()]) self . commit_parser = defaults . commit_parser . replace ( '<change_type>' , f '<change_type> { joined_types } |' ) self . change_type_map = { ** self . change_type_map , ** cz_legacy_map } extended_pattern = defaults . bump_pattern . replace ( 'refactor' , f 'refactor| { joined_types } ' ) self . bump_pattern = extended_pattern self . changelog_pattern = extended_pattern","title":"cz_legacy"},{"location":"reference/cz_legacy/#cz_legacy-attributes","text":"","title":"Attributes"},{"location":"reference/cz_legacy/#cz_legacy.__all__","text":"__all__ = ( 'discover_this' ) Make the _LegacyCz class discoverable by commitizen.","title":"__all__"},{"location":"reference/cz_legacy/#cz_legacy-classes","text":"","title":"Classes"},{"location":"reference/cz_legacy/#cz_legacy.discover_this","text":"Bases: ConventionalCommitsCz Source code in cz_legacy/cz_legacy.py class _LegacyCz ( ConventionalCommitsCz ): def __init__ ( self , config : BaseConfig ) -> None : \"\"\"Initialize the class and override the data members. Args: config: commitizen BaseConfig that stores the parsed settings. Passed to base class Raises: CustomError: commitizen-specific error and exit code to indicate that a configuration item is missing \"\"\" super () . __init__ ( config ) # Read the user-specified legacy change types (ct) cz_legacy_map = self . config . settings . get ( 'cz_legacy_map' ) if not cz_legacy_map : raise CustomError ( f 'User must specify a `cz_legacy_map` dict in `[tool.commitizen]`. Example: \\n { EXAMPLE } ' ) joined_types = '|' . join ([ * cz_legacy_map . keys ()]) self . commit_parser = defaults . commit_parser . replace ( '<change_type>' , f '<change_type> { joined_types } |' ) self . change_type_map = { ** self . change_type_map , ** cz_legacy_map } extended_pattern = defaults . bump_pattern . replace ( 'refactor' , f 'refactor| { joined_types } ' ) self . bump_pattern = extended_pattern self . changelog_pattern = extended_pattern","title":"discover_this"},{"location":"reference/cz_legacy/#cz_legacy.discover_this-functions","text":"","title":"Functions"},{"location":"reference/cz_legacy/#cz_legacy.cz_legacy._LegacyCz.__init__","text":"__init__ ( config ) Initialize the class and override the data members. PARAMETER DESCRIPTION config commitizen BaseConfig that stores the parsed settings. Passed to base class TYPE: BaseConfig RAISES DESCRIPTION CustomError commitizen-specific error and exit code to indicate that a configuration item is missing Source code in cz_legacy/cz_legacy.py def __init__ ( self , config : BaseConfig ) -> None : \"\"\"Initialize the class and override the data members. Args: config: commitizen BaseConfig that stores the parsed settings. Passed to base class Raises: CustomError: commitizen-specific error and exit code to indicate that a configuration item is missing \"\"\" super () . __init__ ( config ) # Read the user-specified legacy change types (ct) cz_legacy_map = self . config . settings . get ( 'cz_legacy_map' ) if not cz_legacy_map : raise CustomError ( f 'User must specify a `cz_legacy_map` dict in `[tool.commitizen]`. Example: \\n { EXAMPLE } ' ) joined_types = '|' . join ([ * cz_legacy_map . keys ()]) self . commit_parser = defaults . commit_parser . replace ( '<change_type>' , f '<change_type> { joined_types } |' ) self . change_type_map = { ** self . change_type_map , ** cz_legacy_map } extended_pattern = defaults . bump_pattern . replace ( 'refactor' , f 'refactor| { joined_types } ' ) self . bump_pattern = extended_pattern self . changelog_pattern = extended_pattern","title":"__init__()"},{"location":"reference/cz_legacy/cz_legacy/","text":"Support legacy commit tags specified in toml file. Attributes \u2693\ufe0e EXAMPLE module-attribute \u2693\ufe0e EXAMPLE = '[tool.commitizen] \\n name = \"cz_legacy\" \\n # Other tool.commitizen configuration options \\n\\n [tool.commitizen.cz_legacy_map] \\n Chg = \"Change (old)\" \\n Fix = \"Fix (old)\" \\n New = \"New (old)\" \\n ' Example custom TOML file configuration. Note: should be kept consistent with the README.","title":"cz_legacy"},{"location":"reference/cz_legacy/cz_legacy/#cz_legacy.cz_legacy-attributes","text":"","title":"Attributes"},{"location":"reference/cz_legacy/cz_legacy/#cz_legacy.cz_legacy.EXAMPLE","text":"EXAMPLE = '[tool.commitizen] \\n name = \"cz_legacy\" \\n # Other tool.commitizen configuration options \\n\\n [tool.commitizen.cz_legacy_map] \\n Chg = \"Change (old)\" \\n Fix = \"Fix (old)\" \\n New = \"New (old)\" \\n ' Example custom TOML file configuration. Note: should be kept consistent with the README.","title":"EXAMPLE"}]}