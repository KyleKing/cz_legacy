{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"cz_legacy \u2693\ufe0e Custom Commitizen parser for user-specified legacy change types. The parser utilizes the cz_conventional_commits pattern and extends with the tag mapping specified in the configuration file While old change types will appear in the Changelog, the user will be prevented from using them in new commits. This is the reverse of the revert/chore logic from commitizen that allows use of those commit types, but won\u2019t display them in the changelog Alternatives \u2693\ufe0e This customization only works when old commits use the <change_type>: <message> format that can be parsed by commitizen. If that doesn\u2019t fit your use case, you may want to try out incremental which (I think) prepends to an existing CHANGELOG Usage \u2693\ufe0e Install \u2693\ufe0e Install the package from PyPi: pip install cz_legacy or from git: pip install git+https://github.com/KyleKing/cz_legacy.git@main Configuration \u2693\ufe0e At minimum, you must have the name = \"cz_legacy\" and [tool.commitizen.cz_legacy_map] in your configuration file. The below example is for TOML, you can also utilize a YAML or JSON file. Below is an example of the three change legacy types Chg, Fix, and New, but the user can choose any tag names and associated mapping for the Changelog [tool.commitizen] name = \"cz_legacy\" # Other tool.commitizen configuration options [tool.commitizen.cz_legacy_map] Chg = \"Change (old)\" Fix = \"Fix (old)\" New = \"New (old)\" Pre-Commit \u2693\ufe0e To use in pre-commit, add this to your pre-commit-config.yml repos : - repo : https://github.com/commitizen-tools/commitizen rev : v2.11.1 hooks : - id : commitizen additional_dependencies : [ \"cz_legacy\" ] stages : [ commit-msg ] Issues \u2693\ufe0e If you have any feature requests, run into any bugs, or have questions, feel free to start a discussion or open an issue on Github at https://github.com/kyleking/cz_legacy . Background \u2693\ufe0e I couldn\u2019t find a good way of adding a few legacy change types from an old commit style to commitizen so I built a package to extend the ConventionalCommitsCz to provide custom logic . For reference, these are the default settings Roadmap \u2693\ufe0e See the Open Issues and Milestones for current status and ./docs/CODE_TAG_SUMMARY.md for annotations in the source code. For release history, see the ./docs/CHANGELOG.md Contributing \u2693\ufe0e See the Developer Guide, Contribution Guidelines, etc ./docs/DEVELOPER_GUIDE.md ./docs/STYLE_GUIDE.md ./docs/CONTRIBUTING.md ./docs/CODE_OF_CONDUCT.md ./docs/SECURITY.md License \u2693\ufe0e LICENSE","title":"cz_legacy"},{"location":"#cz_legacy","text":"Custom Commitizen parser for user-specified legacy change types. The parser utilizes the cz_conventional_commits pattern and extends with the tag mapping specified in the configuration file While old change types will appear in the Changelog, the user will be prevented from using them in new commits. This is the reverse of the revert/chore logic from commitizen that allows use of those commit types, but won\u2019t display them in the changelog","title":"cz_legacy"},{"location":"#alternatives","text":"This customization only works when old commits use the <change_type>: <message> format that can be parsed by commitizen. If that doesn\u2019t fit your use case, you may want to try out incremental which (I think) prepends to an existing CHANGELOG","title":"Alternatives"},{"location":"#usage","text":"","title":"Usage"},{"location":"#install","text":"Install the package from PyPi: pip install cz_legacy or from git: pip install git+https://github.com/KyleKing/cz_legacy.git@main","title":"Install"},{"location":"#configuration","text":"At minimum, you must have the name = \"cz_legacy\" and [tool.commitizen.cz_legacy_map] in your configuration file. The below example is for TOML, you can also utilize a YAML or JSON file. Below is an example of the three change legacy types Chg, Fix, and New, but the user can choose any tag names and associated mapping for the Changelog [tool.commitizen] name = \"cz_legacy\" # Other tool.commitizen configuration options [tool.commitizen.cz_legacy_map] Chg = \"Change (old)\" Fix = \"Fix (old)\" New = \"New (old)\"","title":"Configuration"},{"location":"#pre-commit","text":"To use in pre-commit, add this to your pre-commit-config.yml repos : - repo : https://github.com/commitizen-tools/commitizen rev : v2.11.1 hooks : - id : commitizen additional_dependencies : [ \"cz_legacy\" ] stages : [ commit-msg ]","title":"Pre-Commit"},{"location":"#issues","text":"If you have any feature requests, run into any bugs, or have questions, feel free to start a discussion or open an issue on Github at https://github.com/kyleking/cz_legacy .","title":"Issues"},{"location":"#background","text":"I couldn\u2019t find a good way of adding a few legacy change types from an old commit style to commitizen so I built a package to extend the ConventionalCommitsCz to provide custom logic . For reference, these are the default settings","title":"Background"},{"location":"#roadmap","text":"See the Open Issues and Milestones for current status and ./docs/CODE_TAG_SUMMARY.md for annotations in the source code. For release history, see the ./docs/CHANGELOG.md","title":"Roadmap"},{"location":"#contributing","text":"See the Developer Guide, Contribution Guidelines, etc ./docs/DEVELOPER_GUIDE.md ./docs/STYLE_GUIDE.md ./docs/CONTRIBUTING.md ./docs/CODE_OF_CONDUCT.md ./docs/SECURITY.md","title":"Contributing"},{"location":"#license","text":"LICENSE","title":"License"},{"location":"adr/","text":"ADR Documentation \u2693\ufe0e ADR : Architectural Design Decision ADRs \u2693\ufe0e ADR 000: Meta-ADR.md","title":"ADR Documentation"},{"location":"adr/#adr-documentation","text":"ADR : Architectural Design Decision","title":"ADR Documentation"},{"location":"adr/#adrs","text":"ADR 000: Meta-ADR.md","title":"ADRs"},{"location":"adr/NNN-Template/","text":"[short title of solved problem and solution] \u2693\ufe0e Status: [proposed | rejected | accepted | deprecated | \u2026 | superseded by ADR-0005 ] Deciders: [list everyone involved in the decision] Date: [YYYY-MM-DD when the decision was last updated] Technical Story: [description | ticket/issue URL] Context and Problem Statement \u2693\ufe0e [Describe the context and problem statement, e.g., in free form using two to three sentences. You may want to articulate the problem in form of a question.] Decision Drivers \u2693\ufe0e [driver 1, e.g., a force, facing concern, \u2026] [driver 2, e.g., a force, facing concern, \u2026] \u2026 Considered Options \u2693\ufe0e [option 1] [option 2] [option 3] \u2026 Decision Outcome \u2693\ufe0e Chosen option: \u201c[option 1]\u201d, because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | \u2026 | comes out best (see below)]. Positive Consequences \u2693\ufe0e [e.g., improvement of quality attribute satisfaction, follow-up decisions required, \u2026] \u2026 Negative Consequences \u2693\ufe0e [e.g., compromising quality attribute, follow-up decisions required, \u2026] \u2026 Pros and Cons of the Options \u2693\ufe0e [option 1] \u2693\ufe0e [example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026 [option 2] \u2693\ufe0e [example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026 [option 3] \u2693\ufe0e [example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026 Links \u2693\ufe0e [Link type] [Link to ADR] \u2026","title":"[short title of solved problem and solution]"},{"location":"adr/NNN-Template/#short-title-of-solved-problem-and-solution","text":"Status: [proposed | rejected | accepted | deprecated | \u2026 | superseded by ADR-0005 ] Deciders: [list everyone involved in the decision] Date: [YYYY-MM-DD when the decision was last updated] Technical Story: [description | ticket/issue URL]","title":"[short title of solved problem and solution]"},{"location":"adr/NNN-Template/#context-and-problem-statement","text":"[Describe the context and problem statement, e.g., in free form using two to three sentences. You may want to articulate the problem in form of a question.]","title":"Context and Problem Statement"},{"location":"adr/NNN-Template/#decision-drivers","text":"[driver 1, e.g., a force, facing concern, \u2026] [driver 2, e.g., a force, facing concern, \u2026] \u2026","title":"Decision Drivers "},{"location":"adr/NNN-Template/#considered-options","text":"[option 1] [option 2] [option 3] \u2026","title":"Considered Options"},{"location":"adr/NNN-Template/#decision-outcome","text":"Chosen option: \u201c[option 1]\u201d, because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | \u2026 | comes out best (see below)].","title":"Decision Outcome"},{"location":"adr/NNN-Template/#positive-consequences","text":"[e.g., improvement of quality attribute satisfaction, follow-up decisions required, \u2026] \u2026","title":"Positive Consequences "},{"location":"adr/NNN-Template/#negative-consequences","text":"[e.g., compromising quality attribute, follow-up decisions required, \u2026] \u2026","title":"Negative Consequences "},{"location":"adr/NNN-Template/#pros-and-cons-of-the-options","text":"","title":"Pros and Cons of the Options "},{"location":"adr/NNN-Template/#option-1","text":"[example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026","title":"[option 1]"},{"location":"adr/NNN-Template/#option-2","text":"[example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026","title":"[option 2]"},{"location":"adr/NNN-Template/#option-3","text":"[example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026","title":"[option 3]"},{"location":"adr/NNN-Template/#links","text":"[Link type] [Link to ADR] \u2026","title":"Links "},{"location":"docs/CHANGELOG/","text":"Unreleased \u2693\ufe0e Fix \u2693\ufe0e add link to changelog for PyPi regular imports do not work with this design 0.1.5 (2022-02-18) \u2693\ufe0e Fix \u2693\ufe0e update cz_legacy hook cleanup tests and import checks 0.1.3 (2022-01-16) \u2693\ufe0e Refactor \u2693\ufe0e use \u201cimport as\u201d for discover_this rename isort for copier Fix \u2693\ufe0e init calcipy template 0.1.2 (2021-05-22) \u2693\ufe0e Fix \u2693\ufe0e specify minimum commitizen ver 0.1.1 (2020-12-31) \u2693\ufe0e Refactor \u2693\ufe0e raise commitizen CustomError 0.1.0 (2020-12-24) \u2693\ufe0e Fix \u2693\ufe0e update links in documentation 0.1.0rc0 (2020-12-24) \u2693\ufe0e Fix \u2693\ufe0e use cz>=2.11.1 by bumping min python prevent legacy types on new commits Feat \u2693\ufe0e add pre-commit functional LegacyCz and docs","title":"CHANGELOG"},{"location":"docs/CHANGELOG/#unreleased","text":"","title":"Unreleased"},{"location":"docs/CHANGELOG/#fix","text":"add link to changelog for PyPi regular imports do not work with this design","title":"Fix"},{"location":"docs/CHANGELOG/#015-2022-02-18","text":"","title":"0.1.5 (2022-02-18)"},{"location":"docs/CHANGELOG/#fix_1","text":"update cz_legacy hook cleanup tests and import checks","title":"Fix"},{"location":"docs/CHANGELOG/#013-2022-01-16","text":"","title":"0.1.3 (2022-01-16)"},{"location":"docs/CHANGELOG/#refactor","text":"use \u201cimport as\u201d for discover_this rename isort for copier","title":"Refactor"},{"location":"docs/CHANGELOG/#fix_2","text":"init calcipy template","title":"Fix"},{"location":"docs/CHANGELOG/#012-2021-05-22","text":"","title":"0.1.2 (2021-05-22)"},{"location":"docs/CHANGELOG/#fix_3","text":"specify minimum commitizen ver","title":"Fix"},{"location":"docs/CHANGELOG/#011-2020-12-31","text":"","title":"0.1.1 (2020-12-31)"},{"location":"docs/CHANGELOG/#refactor_1","text":"raise commitizen CustomError","title":"Refactor"},{"location":"docs/CHANGELOG/#010-2020-12-24","text":"","title":"0.1.0 (2020-12-24)"},{"location":"docs/CHANGELOG/#fix_4","text":"update links in documentation","title":"Fix"},{"location":"docs/CHANGELOG/#010rc0-2020-12-24","text":"","title":"0.1.0rc0 (2020-12-24)"},{"location":"docs/CHANGELOG/#fix_5","text":"use cz>=2.11.1 by bumping min python prevent legacy types on new commits","title":"Fix"},{"location":"docs/CHANGELOG/#feat","text":"add pre-commit functional LegacyCz and docs","title":"Feat"},{"location":"docs/CODE_OF_CONDUCT/","text":"Contributor Covenant Code of Conduct \u2693\ufe0e Our Pledge \u2693\ufe0e We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards \u2693\ufe0e Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities \u2693\ufe0e Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope \u2693\ufe0e This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement \u2693\ufe0e Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev.act.kyle@gmail.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines \u2693\ufe0e Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction \u2693\ufe0e Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning \u2693\ufe0e Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban \u2693\ufe0e Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban \u2693\ufe0e Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution \u2693\ufe0e This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla\u2019s code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Contributor Covenant Code of Conduct"},{"location":"docs/CODE_OF_CONDUCT/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"docs/CODE_OF_CONDUCT/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"docs/CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"docs/CODE_OF_CONDUCT/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"docs/CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"docs/CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev.act.kyle@gmail.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"docs/CODE_OF_CONDUCT/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"docs/CODE_OF_CONDUCT/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"docs/CODE_OF_CONDUCT/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"docs/CODE_OF_CONDUCT/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"docs/CODE_OF_CONDUCT/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"docs/CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla\u2019s code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Attribution"},{"location":"docs/CODE_TAG_SUMMARY/","text":"Task Summary \u2693\ufe0e Auto-Generated by cz_legacy Type Comment Last Edit Source File TODO Replace with imports to test 2021-12-09 scripts/check_imports.py:14 PLANNED DDICT_TYPE 2021-07-05 tests/conftest.py:11 Found code tags for TODO (1), PLANNED (1)","title":"Task Summary"},{"location":"docs/CODE_TAG_SUMMARY/#task-summary","text":"Auto-Generated by cz_legacy Type Comment Last Edit Source File TODO Replace with imports to test 2021-12-09 scripts/check_imports.py:14 PLANNED DDICT_TYPE 2021-07-05 tests/conftest.py:11 Found code tags for TODO (1), PLANNED (1)","title":"Task Summary"},{"location":"docs/CONTRIBUTING/","text":"Contributing \u2693\ufe0e Thanks for taking a look! This is primarily a personal project, but Pull Requests and Issues (questions, feature requests, etc.) are welcome. If you would like to submit a Pull Request, please open an issue first to discuss what you would like to change Pull Requests (PR) \u2693\ufe0e Code Development \u2693\ufe0e See ./DEVELOPER_GUIDE.md PR Process \u2693\ufe0e Fork the Project and Clone Create a new branch ( git checkout -b feat/feature-name ) Edit code; update documentation and tests; commit and push Before submitting the review and pushing, make sure to run poetry run doit Open a new Pull Request See the style guide for commit message format ( ./STYLE_GUIDE ) If you run into any issues, please check to see if there is an open issues or open a new one Other PR Tips \u2693\ufe0e Link the issue with Fixes #N in the Pull Request body Please add a short summary of why the change was made, what changed , and any relevant information or screenshots # SHA is the SHA of the commit you want to fix git commit --fixup = SHA # Once all the changes are approved, you can squash your commits: git rebase --interactive --autosquash main # Force Push git push --force","title":"Contributing"},{"location":"docs/CONTRIBUTING/#contributing","text":"Thanks for taking a look! This is primarily a personal project, but Pull Requests and Issues (questions, feature requests, etc.) are welcome. If you would like to submit a Pull Request, please open an issue first to discuss what you would like to change","title":"Contributing"},{"location":"docs/CONTRIBUTING/#pull-requests-pr","text":"","title":"Pull Requests (PR)"},{"location":"docs/CONTRIBUTING/#code-development","text":"See ./DEVELOPER_GUIDE.md","title":"Code Development"},{"location":"docs/CONTRIBUTING/#pr-process","text":"Fork the Project and Clone Create a new branch ( git checkout -b feat/feature-name ) Edit code; update documentation and tests; commit and push Before submitting the review and pushing, make sure to run poetry run doit Open a new Pull Request See the style guide for commit message format ( ./STYLE_GUIDE ) If you run into any issues, please check to see if there is an open issues or open a new one","title":"PR Process"},{"location":"docs/CONTRIBUTING/#other-pr-tips","text":"Link the issue with Fixes #N in the Pull Request body Please add a short summary of why the change was made, what changed , and any relevant information or screenshots # SHA is the SHA of the commit you want to fix git commit --fixup = SHA # Once all the changes are approved, you can squash your commits: git rebase --interactive --autosquash main # Force Push git push --force","title":"Other PR Tips"},{"location":"docs/DEVELOPER_GUIDE/","text":"Developer Notes \u2693\ufe0e Local Development \u2693\ufe0e git clone https://github.com/kyleking/cz_legacy.git cd cz_legacy poetry install # See the available tasks poetry run doit list # Run the default task list (lint, auto-format, test coverage, etc.) poetry run doit --continue # Make code changes and run specific tasks as needed: poetry run doit run test Publishing \u2693\ufe0e For testing, create an account on TestPyPi . Replace ... with the API token generated on TestPyPi|PyPi respectively poetry config repositories.testpypi https://test.pypi.org/legacy/ poetry config pypi-token.testpypi ... poetry run doit run publish_test_pypi # If you didn't configure a token, you will need to provide your username and password to publish To publish to the real PyPi poetry config pypi-token.pypi ... poetry run doit run publish # For a full release, triple check the default tasks, increment the version, rebuild documentation (twice), and publish! poetry run doit run --continue poetry run doit run cl_bump lock document deploy_docs publish cl_write document deploy_docs # For pre-releases use cl_bump_pre poetry run doit run cl_bump_pre -p rc poetry run doit run lock document deploy_docs publish Current Status \u2693\ufe0e File Statements Missing Excluded Coverage cz_legacy/__init__.py 5 0 0 100.0% cz_legacy/cz_legacy.py 17 0 0 100.0% Totals 22 0 0 100.0% Generated on: 2022-02-18T11:16:53.625612","title":"Developer Notes"},{"location":"docs/DEVELOPER_GUIDE/#developer-notes","text":"","title":"Developer Notes"},{"location":"docs/DEVELOPER_GUIDE/#local-development","text":"git clone https://github.com/kyleking/cz_legacy.git cd cz_legacy poetry install # See the available tasks poetry run doit list # Run the default task list (lint, auto-format, test coverage, etc.) poetry run doit --continue # Make code changes and run specific tasks as needed: poetry run doit run test","title":"Local Development"},{"location":"docs/DEVELOPER_GUIDE/#publishing","text":"For testing, create an account on TestPyPi . Replace ... with the API token generated on TestPyPi|PyPi respectively poetry config repositories.testpypi https://test.pypi.org/legacy/ poetry config pypi-token.testpypi ... poetry run doit run publish_test_pypi # If you didn't configure a token, you will need to provide your username and password to publish To publish to the real PyPi poetry config pypi-token.pypi ... poetry run doit run publish # For a full release, triple check the default tasks, increment the version, rebuild documentation (twice), and publish! poetry run doit run --continue poetry run doit run cl_bump lock document deploy_docs publish cl_write document deploy_docs # For pre-releases use cl_bump_pre poetry run doit run cl_bump_pre -p rc poetry run doit run lock document deploy_docs publish","title":"Publishing"},{"location":"docs/DEVELOPER_GUIDE/#current-status","text":"File Statements Missing Excluded Coverage cz_legacy/__init__.py 5 0 0 100.0% cz_legacy/cz_legacy.py 17 0 0 100.0% Totals 22 0 0 100.0% Generated on: 2022-02-18T11:16:53.625612","title":"Current Status"},{"location":"docs/SECURITY/","text":"Security \u2693\ufe0e Reporting Security Issues \u2693\ufe0e Do not open issues that might have security implications! It is critical that security related issues are reported privately so we have time to address them before they become public knowledge. Vulnerabilities can be reported by emailing core members: Kyle King ( dev.act.kyle@gmail.com ) Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue: Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.) Full paths of source file(s) related to the manifestation of the issue The location of the affected source code (tag/branch/commit or direct URL) Any special configuration required to reproduce the issue Environment (e.g. Linux / Windows / macOS) Step-by-step instructions to reproduce the issue Proof-of-concept or exploit code (if possible) Impact of the issue, including how an attacker might exploit the issue This information will help us triage your report more quickly. Preferred Languages \u2693\ufe0e We prefer all communications to be in English. Attribution \u2693\ufe0e This file was based on the template from TezRomacH/python-package-template/SECURITY.md","title":"Security"},{"location":"docs/SECURITY/#security","text":"","title":"Security"},{"location":"docs/SECURITY/#reporting-security-issues","text":"Do not open issues that might have security implications! It is critical that security related issues are reported privately so we have time to address them before they become public knowledge. Vulnerabilities can be reported by emailing core members: Kyle King ( dev.act.kyle@gmail.com ) Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue: Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.) Full paths of source file(s) related to the manifestation of the issue The location of the affected source code (tag/branch/commit or direct URL) Any special configuration required to reproduce the issue Environment (e.g. Linux / Windows / macOS) Step-by-step instructions to reproduce the issue Proof-of-concept or exploit code (if possible) Impact of the issue, including how an attacker might exploit the issue This information will help us triage your report more quickly.","title":"Reporting Security Issues"},{"location":"docs/SECURITY/#preferred-languages","text":"We prefer all communications to be in English.","title":"Preferred Languages"},{"location":"docs/SECURITY/#attribution","text":"This file was based on the template from TezRomacH/python-package-template/SECURITY.md","title":"Attribution"},{"location":"docs/STYLE_GUIDE/","text":"Personal Style Guides \u2693\ufe0e Git \u2693\ufe0e Use Conventional Commits and Commitizen The Changelog is an important part of a project (built with commitizen ). Use semver Conventional Commits \u2693\ufe0e type(scope): description / body The type feat MUST be used when a commit adds a new feature to your application or library. The type fix MUST be used when a commit represents a bug fix for your application. A scope MUST consist of a noun describing a section of the codebase surrounded by parenthesis, e.g., fix(parser): or issue number fix(#32): A ! can be used to indicate a breaking change, e.g. refactor!: drop support for Node 6 What if a commit fits multiple types? Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is its ability to drive us to make more organized commits and PRs. It discourages moving fast in a disorganized way. It helps you be able to move fast long term across multiple projects with varied contributors. semver : fix : PATCH / feat : MINOR / BREAKING CHANGE : MAJOR Use git rebase -i to fix commit names prior to merging if incorrect types/scopes are used Commitizen Types and Scopes \u2693\ufe0e Types fix: A bug fix feat: A new feature docs: Documentation-only changes (code comments, separate docs) style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons) perf: A code change that improves performance refactor: A change to production code that is not fix, feat, or perf test: Adding missing or correcting existing tests build: Changes that affect the build system or external dependencies (example scopes: pip, docker, npm) ci: Changes to our CI configuration files and scripts (example scopes: GitLabCI) Scopes Class, File name, Issue Number, other approved noun Git Message Guidelines \u2693\ufe0e Commit message guidelines Full sentence with verb ( lowercase ) and concise description. Below are modified examples for Conventional Commits fix(roles): bug in admin role permissions feat(ui): implement new button design build(pip): upgrade package to remove vulnerabilities refactor: file structure to improve code readability perf(cli): rewrite methods feat(api): endpoints to implement new customer dashboard How to write a good commit message A diff will tell you what changed, but only the commit message can properly tell you why. Keep in mind: This has all been said before . The seven rules of a great Git commit message Try for 50 characters, but consider 72 the hard limit Use the body to explain what and why vs. how Issue Labels and Milestones \u2693\ufe0e Personal Guide Labels Needs Discussion : (#ff5722) Ticket needs discussion and prioritization Type: Bug : (#d73a4a) Something isn\u2019t working Type: Documentation : (#69cde9) Documentation changes Type: Maintenance : (#c5def5) Chore including build/dep, CI, refactor, or perf Type: Idea : (#fbca04) General idea or concept that could become a feature request Type: Feature : (#0075ca) Clearly defined new feature request Milestones Current Tasks (Main Milestone) - name could change based on a specific project, sprint, or month Next Tasks Blue Sky Search is:open is:issue assignee:KyleKing archived:false milestone:\"blue sky\" or no:milestone etc. Research [Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each \u201cit is much more helpful to see the status and type of all issues at a glance.\u201d One of each: Status: \u2026 Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed Type: \u2026 Bug, Maintenance, Question, Enhancement Priority: \u2026 Critical, High, Medium, Low [Britecharts](https://britecharts.github.io/britecharts/github-labels.html) Status: \u2026 On Review \u2013 Request that we are pondering if including or not Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed Needs Design \u2013 Feature that needs a design Ready to Go \u2013 Issue that has been defined and is ready to get started with In Progress \u2013 Issue that is being worked on right now. Completed \u2013 Finished feature or fix Type: \u2026 Bug \u2013 An unexpected problem or unintended behavior Feature \u2013 A new feature request Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements Documentation \u2013 A documentation improvement task Question \u2013 An issue or PR that needs more information or a user question Not Included Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming [Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html) Milestone Overview What are we doing right now? What aren\u2019t we doing right now? 2a. Stuff we\u2019ll probably do soon 2b. Stuff we probably won\u2019t do soon What aren\u2019t we sure about? Milestone Descriptions Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration. Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone. We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone. Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored. What aren\u2019t we sure about?: issues with no milestone. Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets \u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d External Links \u2693\ufe0e TODO: Revisit Git: The Simple Guide Commit Messages and why use the present tense Github\u2019s Advice on Github Most Comprehensive Guide Git Pro Book (free) Bash Tab-Completion Snippet Python \u2693\ufe0e TODO: Revisit Python Style Guides https://gist.github.com/sloria/7001839 http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/ https://innoq.github.io/cards42org_en/ https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide https://www.python.org/doc/humor/ https://docs.python-guide.org/writing/reading/ https://realpython.com/python-refactoring/ ADRs \u2693\ufe0e TODO: Revisit Examples https://github.com/pawamoy/mkdocstrings/issues/28","title":"Personal Style Guides"},{"location":"docs/STYLE_GUIDE/#personal-style-guides","text":"","title":"Personal Style Guides"},{"location":"docs/STYLE_GUIDE/#git","text":"Use Conventional Commits and Commitizen The Changelog is an important part of a project (built with commitizen ). Use semver","title":"Git"},{"location":"docs/STYLE_GUIDE/#conventional-commits","text":"type(scope): description / body The type feat MUST be used when a commit adds a new feature to your application or library. The type fix MUST be used when a commit represents a bug fix for your application. A scope MUST consist of a noun describing a section of the codebase surrounded by parenthesis, e.g., fix(parser): or issue number fix(#32): A ! can be used to indicate a breaking change, e.g. refactor!: drop support for Node 6 What if a commit fits multiple types? Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is its ability to drive us to make more organized commits and PRs. It discourages moving fast in a disorganized way. It helps you be able to move fast long term across multiple projects with varied contributors. semver : fix : PATCH / feat : MINOR / BREAKING CHANGE : MAJOR Use git rebase -i to fix commit names prior to merging if incorrect types/scopes are used","title":"Conventional Commits"},{"location":"docs/STYLE_GUIDE/#commitizen-types-and-scopes","text":"Types fix: A bug fix feat: A new feature docs: Documentation-only changes (code comments, separate docs) style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons) perf: A code change that improves performance refactor: A change to production code that is not fix, feat, or perf test: Adding missing or correcting existing tests build: Changes that affect the build system or external dependencies (example scopes: pip, docker, npm) ci: Changes to our CI configuration files and scripts (example scopes: GitLabCI) Scopes Class, File name, Issue Number, other approved noun","title":"Commitizen Types and Scopes"},{"location":"docs/STYLE_GUIDE/#git-message-guidelines","text":"Commit message guidelines Full sentence with verb ( lowercase ) and concise description. Below are modified examples for Conventional Commits fix(roles): bug in admin role permissions feat(ui): implement new button design build(pip): upgrade package to remove vulnerabilities refactor: file structure to improve code readability perf(cli): rewrite methods feat(api): endpoints to implement new customer dashboard How to write a good commit message A diff will tell you what changed, but only the commit message can properly tell you why. Keep in mind: This has all been said before . The seven rules of a great Git commit message Try for 50 characters, but consider 72 the hard limit Use the body to explain what and why vs. how","title":"Git Message Guidelines"},{"location":"docs/STYLE_GUIDE/#issue-labels-and-milestones","text":"Personal Guide Labels Needs Discussion : (#ff5722) Ticket needs discussion and prioritization Type: Bug : (#d73a4a) Something isn\u2019t working Type: Documentation : (#69cde9) Documentation changes Type: Maintenance : (#c5def5) Chore including build/dep, CI, refactor, or perf Type: Idea : (#fbca04) General idea or concept that could become a feature request Type: Feature : (#0075ca) Clearly defined new feature request Milestones Current Tasks (Main Milestone) - name could change based on a specific project, sprint, or month Next Tasks Blue Sky Search is:open is:issue assignee:KyleKing archived:false milestone:\"blue sky\" or no:milestone etc. Research [Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each \u201cit is much more helpful to see the status and type of all issues at a glance.\u201d One of each: Status: \u2026 Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed Type: \u2026 Bug, Maintenance, Question, Enhancement Priority: \u2026 Critical, High, Medium, Low [Britecharts](https://britecharts.github.io/britecharts/github-labels.html) Status: \u2026 On Review \u2013 Request that we are pondering if including or not Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed Needs Design \u2013 Feature that needs a design Ready to Go \u2013 Issue that has been defined and is ready to get started with In Progress \u2013 Issue that is being worked on right now. Completed \u2013 Finished feature or fix Type: \u2026 Bug \u2013 An unexpected problem or unintended behavior Feature \u2013 A new feature request Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements Documentation \u2013 A documentation improvement task Question \u2013 An issue or PR that needs more information or a user question Not Included Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming [Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html) Milestone Overview What are we doing right now? What aren\u2019t we doing right now? 2a. Stuff we\u2019ll probably do soon 2b. Stuff we probably won\u2019t do soon What aren\u2019t we sure about? Milestone Descriptions Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration. Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone. We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone. Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored. What aren\u2019t we sure about?: issues with no milestone. Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets \u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d","title":"Issue Labels and Milestones"},{"location":"docs/STYLE_GUIDE/#external-links","text":"TODO: Revisit Git: The Simple Guide Commit Messages and why use the present tense Github\u2019s Advice on Github Most Comprehensive Guide Git Pro Book (free) Bash Tab-Completion Snippet","title":"External Links"},{"location":"docs/STYLE_GUIDE/#python","text":"TODO: Revisit Python Style Guides https://gist.github.com/sloria/7001839 http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/ https://innoq.github.io/cards42org_en/ https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide https://www.python.org/doc/humor/ https://docs.python-guide.org/writing/reading/ https://realpython.com/python-refactoring/","title":"Python"},{"location":"docs/STYLE_GUIDE/#adrs","text":"TODO: Revisit Examples https://github.com/pawamoy/mkdocstrings/issues/28","title":"ADRs"},{"location":"modules/cz_legacy/","text":"cz_legacy \u2693\ufe0e cz_legacy. View Source \"\"\"cz_legacy.\"\"\" from .cz_legacy import _LegacyCz as discover_this # noqa: N813 __version__ = '0.1.6' __pkg_name__ = 'cz_legacy' __all__ = ( 'discover_this' ,) \"\"\"Make the _LegacyCz class discoverable by commitizen.\"\"\" Sub-modules \u2693\ufe0e cz_legacy.cz_legacy Classes \u2693\ufe0e discover_this \u2693\ufe0e class discover_this ( config : commitizen . config . base_config . BaseConfig ) View Source class _LegacyCz ( ConventionalCommitsCz ): def __init__ ( self , config : BaseConfig ) -> None : \"\"\"Initialize the class and override the data members. Args: config: commitizen BaseConfig that stores the parsed settings. Passed to base class Raises: CustomError: commitizen-specific error and exit code to indicate that a configuration item is missing \"\"\" super () . __init__ ( config ) # Read the user-specified legacy change types (ct) cz_legacy_map = self . config . settings . get ( 'cz_legacy_map' ) if not cz_legacy_map : raise CustomError ( f 'User must specify a `cz_legacy_map` dict in `[tool.commitizen]`. Example: \\n { EXAMPLE } ' ) joined_types = '|' . join ([ * cz_legacy_map . keys ()]) self . commit_parser = defaults . commit_parser . replace ( '<change_type>' , f '<change_type> { joined_types } |' ) self . change_type_map = { ** self . change_type_map , ** cz_legacy_map } extended_pattern = defaults . bump_pattern . replace ( 'refactor' , f 'refactor| { joined_types } ' ) self . bump_pattern = extended_pattern self . changelog_pattern = extended_pattern Ancestors (in MRO) \u2693\ufe0e commitizen.cz.conventional_commits.conventional_commits.ConventionalCommitsCz commitizen.cz.base.BaseCommitizen Class variables \u2693\ufe0e bump_map bump_pattern change_type_map change_type_order changelog_hook changelog_message_builder_hook changelog_pattern commit_parser default_style_config Instance variables \u2693\ufe0e style Methods \u2693\ufe0e example \u2693\ufe0e def example ( self ) -> str Example of the commit message. View Source def example ( self ) -> str : return ( \"fix: correct minor typos in code \\n \" \" \\n \" \"see the issue for details on the typos fixed \\n \" \" \\n \" \"closes issue #12\" ) info \u2693\ufe0e def info ( self ) -> str Information about the standardized commit message. View Source def info ( self ) -> str : dir_path = os . path . dirname ( os . path . realpath ( __file__ )) filepath = os . path . join ( dir_path , \"conventional_commits_info.txt\" ) with open ( filepath , \"r\" ) as f : content = f . read () return content message \u2693\ufe0e def message ( self , answers : dict ) -> str Format your git message. View Source def message ( self , answers : dict ) -> str : prefix = answers [ \"prefix\" ] scope = answers [ \"scope\" ] subject = answers [ \"subject\" ] body = answers [ \"body\" ] footer = answers [ \"footer\" ] is_breaking_change = answers [ \"is_breaking_change\" ] if scope : scope = f \"( { scope } )\" if body : body = f \" \\n\\n { body } \" if is_breaking_change : footer = f \"BREAKING CHANGE: { footer } \" if footer : footer = f \" \\n\\n { footer } \" message = f \" { prefix }{ scope } : { subject }{ body }{ footer } \" return message process_commit \u2693\ufe0e def process_commit ( self , commit : str ) -> str Process commit for changelog. If not overwritten, it returns the first line of commit. View Source def process_commit ( self , commit : str ) -> str : pat = re . compile ( self . schema_pattern ()) m = re . match ( pat , commit ) if m is None : return \"\" return m . group ( 3 ) . strip () questions \u2693\ufe0e def questions ( self ) -> List [ Dict [ str , Any ]] Questions regarding the commit message. View Source def questions ( self ) -> List [ Dict [ str , Any ]]: questions : List [ Dict [ str , Any ]] = [ { \"type\" : \"list\" , \"name\" : \"prefix\" , \"message\" : \"Select the type of change you are committing\" , \"choices\" : [ { \"value\" : \"fix\" , \"name\" : \"fix: A bug fix. Correlates with PATCH in SemVer\" , \"key\" : \"x\" , }, { \"value\" : \"feat\" , \"name\" : \"feat: A new feature. Correlates with MINOR in SemVer\" , \"key\" : \"f\" , }, { \"value\" : \"docs\" , \"name\" : \"docs: Documentation only changes\" , \"key\" : \"d\" , }, { \"value\" : \"style\" , \"name\" : ( \"style: Changes that do not affect the \" \"meaning of the code (white-space, formatting,\" \" missing semi-colons, etc)\" ), \"key\" : \"s\" , }, { \"value\" : \"refactor\" , \"name\" : ( \"refactor: A code change that neither fixes \" \"a bug nor adds a feature\" ), \"key\" : \"r\" , }, { \"value\" : \"perf\" , \"name\" : \"perf: A code change that improves performance\" , \"key\" : \"p\" , }, { \"value\" : \"test\" , \"name\" : ( \"test: Adding missing or correcting \" \"existing tests\" ), \"key\" : \"t\" , }, { \"value\" : \"build\" , \"name\" : ( \"build: Changes that affect the build system or \" \"external dependencies (example scopes: pip, docker, npm)\" ), \"key\" : \"b\" , }, { \"value\" : \"ci\" , \"name\" : ( \"ci: Changes to our CI configuration files and \" \"scripts (example scopes: GitLabCI)\" ), \"key\" : \"c\" , }, ], }, { \"type\" : \"input\" , \"name\" : \"scope\" , \"message\" : ( \"What is the scope of this change? (class or file name): (press [enter] to skip) \\n \" ), \"filter\" : parse_scope , }, { \"type\" : \"input\" , \"name\" : \"subject\" , \"filter\" : parse_subject , \"message\" : ( \"Write a short and imperative summary of the code changes: (lower case and no period) \\n \" ), }, { \"type\" : \"input\" , \"name\" : \"body\" , \"message\" : ( \"Provide additional contextual information about the code changes: (press [enter] to skip) \\n \" ), \"filter\" : multiple_line_breaker , }, { \"type\" : \"confirm\" , \"message\" : \"Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer\" , \"name\" : \"is_breaking_change\" , \"default\" : False , }, { \"type\" : \"input\" , \"name\" : \"footer\" , \"message\" : ( \"Footer. Information about Breaking Changes and \" \"reference issues that this commit closes: (press [enter] to skip) \\n \" ), }, ] return questions schema \u2693\ufe0e def schema ( self ) -> str Schema definition of the commit message. View Source def schema ( self ) -> str : return ( \"<type>(<scope>): <subject> \\n \" \"<BLANK LINE> \\n \" \"<body> \\n \" \"<BLANK LINE> \\n \" \"(BREAKING CHANGE: )<footer>\" ) schema_pattern \u2693\ufe0e def schema_pattern ( self ) -> str Regex matching the schema used for message validation. View Source def schema_pattern ( self ) -> str : PATTERN = ( r \"(build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump)\" r \"(\\(\\S+\\))?!?:(\\s.*)\" ) return PATTERN","title":"cz_legacy"},{"location":"modules/cz_legacy/#cz_legacy","text":"cz_legacy. View Source \"\"\"cz_legacy.\"\"\" from .cz_legacy import _LegacyCz as discover_this # noqa: N813 __version__ = '0.1.6' __pkg_name__ = 'cz_legacy' __all__ = ( 'discover_this' ,) \"\"\"Make the _LegacyCz class discoverable by commitizen.\"\"\"","title":"cz_legacy"},{"location":"modules/cz_legacy/#sub-modules","text":"cz_legacy.cz_legacy","title":"Sub-modules"},{"location":"modules/cz_legacy/#classes","text":"","title":"Classes"},{"location":"modules/cz_legacy/#discover_this","text":"class discover_this ( config : commitizen . config . base_config . BaseConfig ) View Source class _LegacyCz ( ConventionalCommitsCz ): def __init__ ( self , config : BaseConfig ) -> None : \"\"\"Initialize the class and override the data members. Args: config: commitizen BaseConfig that stores the parsed settings. Passed to base class Raises: CustomError: commitizen-specific error and exit code to indicate that a configuration item is missing \"\"\" super () . __init__ ( config ) # Read the user-specified legacy change types (ct) cz_legacy_map = self . config . settings . get ( 'cz_legacy_map' ) if not cz_legacy_map : raise CustomError ( f 'User must specify a `cz_legacy_map` dict in `[tool.commitizen]`. Example: \\n { EXAMPLE } ' ) joined_types = '|' . join ([ * cz_legacy_map . keys ()]) self . commit_parser = defaults . commit_parser . replace ( '<change_type>' , f '<change_type> { joined_types } |' ) self . change_type_map = { ** self . change_type_map , ** cz_legacy_map } extended_pattern = defaults . bump_pattern . replace ( 'refactor' , f 'refactor| { joined_types } ' ) self . bump_pattern = extended_pattern self . changelog_pattern = extended_pattern","title":"discover_this"},{"location":"modules/cz_legacy/#ancestors-in-mro","text":"commitizen.cz.conventional_commits.conventional_commits.ConventionalCommitsCz commitizen.cz.base.BaseCommitizen","title":"Ancestors (in MRO)"},{"location":"modules/cz_legacy/#class-variables","text":"bump_map bump_pattern change_type_map change_type_order changelog_hook changelog_message_builder_hook changelog_pattern commit_parser default_style_config","title":"Class variables"},{"location":"modules/cz_legacy/#instance-variables","text":"style","title":"Instance variables"},{"location":"modules/cz_legacy/#methods","text":"","title":"Methods"},{"location":"modules/cz_legacy/#example","text":"def example ( self ) -> str Example of the commit message. View Source def example ( self ) -> str : return ( \"fix: correct minor typos in code \\n \" \" \\n \" \"see the issue for details on the typos fixed \\n \" \" \\n \" \"closes issue #12\" )","title":"example"},{"location":"modules/cz_legacy/#info","text":"def info ( self ) -> str Information about the standardized commit message. View Source def info ( self ) -> str : dir_path = os . path . dirname ( os . path . realpath ( __file__ )) filepath = os . path . join ( dir_path , \"conventional_commits_info.txt\" ) with open ( filepath , \"r\" ) as f : content = f . read () return content","title":"info"},{"location":"modules/cz_legacy/#message","text":"def message ( self , answers : dict ) -> str Format your git message. View Source def message ( self , answers : dict ) -> str : prefix = answers [ \"prefix\" ] scope = answers [ \"scope\" ] subject = answers [ \"subject\" ] body = answers [ \"body\" ] footer = answers [ \"footer\" ] is_breaking_change = answers [ \"is_breaking_change\" ] if scope : scope = f \"( { scope } )\" if body : body = f \" \\n\\n { body } \" if is_breaking_change : footer = f \"BREAKING CHANGE: { footer } \" if footer : footer = f \" \\n\\n { footer } \" message = f \" { prefix }{ scope } : { subject }{ body }{ footer } \" return message","title":"message"},{"location":"modules/cz_legacy/#process_commit","text":"def process_commit ( self , commit : str ) -> str Process commit for changelog. If not overwritten, it returns the first line of commit. View Source def process_commit ( self , commit : str ) -> str : pat = re . compile ( self . schema_pattern ()) m = re . match ( pat , commit ) if m is None : return \"\" return m . group ( 3 ) . strip ()","title":"process_commit"},{"location":"modules/cz_legacy/#questions","text":"def questions ( self ) -> List [ Dict [ str , Any ]] Questions regarding the commit message. View Source def questions ( self ) -> List [ Dict [ str , Any ]]: questions : List [ Dict [ str , Any ]] = [ { \"type\" : \"list\" , \"name\" : \"prefix\" , \"message\" : \"Select the type of change you are committing\" , \"choices\" : [ { \"value\" : \"fix\" , \"name\" : \"fix: A bug fix. Correlates with PATCH in SemVer\" , \"key\" : \"x\" , }, { \"value\" : \"feat\" , \"name\" : \"feat: A new feature. Correlates with MINOR in SemVer\" , \"key\" : \"f\" , }, { \"value\" : \"docs\" , \"name\" : \"docs: Documentation only changes\" , \"key\" : \"d\" , }, { \"value\" : \"style\" , \"name\" : ( \"style: Changes that do not affect the \" \"meaning of the code (white-space, formatting,\" \" missing semi-colons, etc)\" ), \"key\" : \"s\" , }, { \"value\" : \"refactor\" , \"name\" : ( \"refactor: A code change that neither fixes \" \"a bug nor adds a feature\" ), \"key\" : \"r\" , }, { \"value\" : \"perf\" , \"name\" : \"perf: A code change that improves performance\" , \"key\" : \"p\" , }, { \"value\" : \"test\" , \"name\" : ( \"test: Adding missing or correcting \" \"existing tests\" ), \"key\" : \"t\" , }, { \"value\" : \"build\" , \"name\" : ( \"build: Changes that affect the build system or \" \"external dependencies (example scopes: pip, docker, npm)\" ), \"key\" : \"b\" , }, { \"value\" : \"ci\" , \"name\" : ( \"ci: Changes to our CI configuration files and \" \"scripts (example scopes: GitLabCI)\" ), \"key\" : \"c\" , }, ], }, { \"type\" : \"input\" , \"name\" : \"scope\" , \"message\" : ( \"What is the scope of this change? (class or file name): (press [enter] to skip) \\n \" ), \"filter\" : parse_scope , }, { \"type\" : \"input\" , \"name\" : \"subject\" , \"filter\" : parse_subject , \"message\" : ( \"Write a short and imperative summary of the code changes: (lower case and no period) \\n \" ), }, { \"type\" : \"input\" , \"name\" : \"body\" , \"message\" : ( \"Provide additional contextual information about the code changes: (press [enter] to skip) \\n \" ), \"filter\" : multiple_line_breaker , }, { \"type\" : \"confirm\" , \"message\" : \"Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer\" , \"name\" : \"is_breaking_change\" , \"default\" : False , }, { \"type\" : \"input\" , \"name\" : \"footer\" , \"message\" : ( \"Footer. Information about Breaking Changes and \" \"reference issues that this commit closes: (press [enter] to skip) \\n \" ), }, ] return questions","title":"questions"},{"location":"modules/cz_legacy/#schema","text":"def schema ( self ) -> str Schema definition of the commit message. View Source def schema ( self ) -> str : return ( \"<type>(<scope>): <subject> \\n \" \"<BLANK LINE> \\n \" \"<body> \\n \" \"<BLANK LINE> \\n \" \"(BREAKING CHANGE: )<footer>\" )","title":"schema"},{"location":"modules/cz_legacy/#schema_pattern","text":"def schema_pattern ( self ) -> str Regex matching the schema used for message validation. View Source def schema_pattern ( self ) -> str : PATTERN = ( r \"(build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump)\" r \"(\\(\\S+\\))?!?:(\\s.*)\" ) return PATTERN","title":"schema_pattern"},{"location":"modules/cz_legacy/_code_diagrams/","text":"Code Diagrams \u2693\ufe0e Auto-generated with pylint-pyreverse Packages \u2693\ufe0e Full Size Classes \u2693\ufe0e Full Size","title":"Code Diagrams"},{"location":"modules/cz_legacy/_code_diagrams/#code-diagrams","text":"Auto-generated with pylint-pyreverse","title":"Code Diagrams"},{"location":"modules/cz_legacy/_code_diagrams/#packages","text":"Full Size","title":"Packages"},{"location":"modules/cz_legacy/_code_diagrams/#classes","text":"Full Size","title":"Classes"},{"location":"modules/cz_legacy/cz_legacy/","text":"cz_legacy.cz_legacy \u2693\ufe0e Support legacy commit tags specified in toml file. View Source \"\"\"Support legacy commit tags specified in toml file.\"\"\" from commitizen import defaults from commitizen.config.base_config import BaseConfig from commitizen.cz.conventional_commits.conventional_commits import ConventionalCommitsCz from commitizen.exceptions import CustomError EXAMPLE = \"\"\"[tool.commitizen] name = \"cz_legacy\" # Other tool.commitizen configuration options [tool.commitizen.cz_legacy_map] Chg = \"Change (old)\" Fix = \"Fix (old)\" New = \"New (old)\" \"\"\" \"\"\"Example custom TOML file configuration. Note: should be kept consistent with the README.\"\"\" class _LegacyCz ( ConventionalCommitsCz ): def __init__ ( self , config : BaseConfig ) -> None : \"\"\"Initialize the class and override the data members. Args: config: commitizen BaseConfig that stores the parsed settings. Passed to base class Raises: CustomError: commitizen-specific error and exit code to indicate that a configuration item is missing \"\"\" super () . __init__ ( config ) # Read the user-specified legacy change types (ct) cz_legacy_map = self . config . settings . get ( 'cz_legacy_map' ) if not cz_legacy_map : raise CustomError ( f 'User must specify a `cz_legacy_map` dict in `[tool.commitizen]`. Example: \\n { EXAMPLE } ' ) joined_types = '|' . join ([ * cz_legacy_map . keys ()]) self . commit_parser = defaults . commit_parser . replace ( '<change_type>' , f '<change_type> { joined_types } |' ) self . change_type_map = { ** self . change_type_map , ** cz_legacy_map } extended_pattern = defaults . bump_pattern . replace ( 'refactor' , f 'refactor| { joined_types } ' ) self . bump_pattern = extended_pattern self . changelog_pattern = extended_pattern Variables \u2693\ufe0e EXAMPLE Example custom TOML file configuration. Note: should be kept consistent with the README.","title":"cz_legacy.cz_legacy"},{"location":"modules/cz_legacy/cz_legacy/#cz_legacycz_legacy","text":"Support legacy commit tags specified in toml file. View Source \"\"\"Support legacy commit tags specified in toml file.\"\"\" from commitizen import defaults from commitizen.config.base_config import BaseConfig from commitizen.cz.conventional_commits.conventional_commits import ConventionalCommitsCz from commitizen.exceptions import CustomError EXAMPLE = \"\"\"[tool.commitizen] name = \"cz_legacy\" # Other tool.commitizen configuration options [tool.commitizen.cz_legacy_map] Chg = \"Change (old)\" Fix = \"Fix (old)\" New = \"New (old)\" \"\"\" \"\"\"Example custom TOML file configuration. Note: should be kept consistent with the README.\"\"\" class _LegacyCz ( ConventionalCommitsCz ): def __init__ ( self , config : BaseConfig ) -> None : \"\"\"Initialize the class and override the data members. Args: config: commitizen BaseConfig that stores the parsed settings. Passed to base class Raises: CustomError: commitizen-specific error and exit code to indicate that a configuration item is missing \"\"\" super () . __init__ ( config ) # Read the user-specified legacy change types (ct) cz_legacy_map = self . config . settings . get ( 'cz_legacy_map' ) if not cz_legacy_map : raise CustomError ( f 'User must specify a `cz_legacy_map` dict in `[tool.commitizen]`. Example: \\n { EXAMPLE } ' ) joined_types = '|' . join ([ * cz_legacy_map . keys ()]) self . commit_parser = defaults . commit_parser . replace ( '<change_type>' , f '<change_type> { joined_types } |' ) self . change_type_map = { ** self . change_type_map , ** cz_legacy_map } extended_pattern = defaults . bump_pattern . replace ( 'refactor' , f 'refactor| { joined_types } ' ) self . bump_pattern = extended_pattern self . changelog_pattern = extended_pattern","title":"cz_legacy.cz_legacy"},{"location":"modules/cz_legacy/cz_legacy/#variables","text":"EXAMPLE Example custom TOML file configuration. Note: should be kept consistent with the README.","title":"Variables"}]}